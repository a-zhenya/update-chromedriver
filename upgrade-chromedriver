#!/bin/sh

set -ue

VERSION="1.4.3"
DOWNLOAD_DIR="/tmp"
DEFAULT_TARGET_DIR="$HOME/.local/bin"
DRY=0
DOWNLOAD_ONLY=0
TARGET_DIR=""
CHROME_VERSION=""
USE_APT=0
LEAVE_ZIP_ON_FAILURE=0
PLATFORM=linux64
PLATFORMS="linux64 mac-arm64 mac-x64 win32 win64"
FORCE=0

usage() {
    cat <<EOF
Usage: $(basename "$0") [OPTIONS]

Options:
  --dry                     Check if an update is needed, do not install
  --download-only           Download the archive, but do not install the driver
  --leave-zip-on-failure    Do not delete archive if installation fails
  -t, --target-dir DIR      Directory where chromedriver will be installed
  -d, --download-dir DIR    Directory where the archive will be downloaded
  --chrome VERSION          Use this Chrome version (implies --dry). Can be specified without --chrome
                            If not specified, the version from the installed Chrome will be used
  -a, --apt                 Use the version from apt (implies --dry)
  --platform PLATFORM       Specify the platform (default: $PLATFORM, implies --download-only)
                            Available values: $PLATFORMS
  -f, --force               Always download
  --bash-completion         Output the bash completion script. To enable, run:
                            eval "\$($(basename "$0") --bash-completion)"
  --version                 Print the script version and exit
  --self-update [RELEASE]   Update this script to the latest or specific release
  -h, --help                Show this help message
EOF
    exit 1
}

UNGUARDED_VERSION=0
while [ $# -gt 0 ]; do
    case "$1" in
        --dry)
            DRY=1
            DOWNLOAD_ONLY=0
            ;;
        --download-only)
            DOWNLOAD_ONLY=1
            ;;
        --leave-zip-on-failure)
            LEAVE_ZIP_ON_FAILURE=1
            ;;
        -t|--target-dir)
            shift
            TARGET_DIR="$1"
            ;;
        -d|--download-dir)
            shift
            DOWNLOAD_DIR="$1"
            ;;
        --chrome)
            shift
            CHROME_VERSION="$1"
            DRY=1
            ;;
        -f|--force)
            FORCE=1
            ;;
        --platform)
            shift
            PLATFORM="$1"
            DOWNLOAD_ONLY=1
            FORCE=1
            ;;
        -a|--apt)
            USE_APT=1
            DRY=1
            ;;
        --self-update)
            shift
            RELEASE="${1:-}"
            QUERY_SUFFIX="${RELEASE:+tags/$RELEASE}"
            QUERY_SUFFIX="${QUERY_SUFFIX:-latest}"
            RELEASE_INFO="$(curl -s https://api.github.com/repos/a-zhenya/update-chromedriver/releases/$QUERY_SUFFIX)" 
            if [ -z "$RELEASE_INFO" -o "$(printf '%s' "$RELEASE_INFO" | jq .status)" != null ]; then
                echo "Failed to fetch release information: $QUERY_SUFFIX"
                exit 1
            fi
            printf '%s' "$RELEASE_INFO" | jq -r '.tag_name + " " + .name + "\n" + .html_url + "\n" + .body'
            curl -Ls "$(printf '%s' "$RELEASE_INFO" | jq -r .tarball_url)" \
                | tar xvz --wildcards --overwrite --strip-components=1 --directory="$(dirname "$0")" "*/upgrade-chromedriver"
            chmod +x "$0"
            echo "Self-update complete"
            exit 0
            ;;
        --bash-completion)
            cat <<EOF
_upgrade_chromedriver() {
    local cur prev opts
    COMPREPLY=()
    cur="\${COMP_WORDS[COMP_CWORD]}"
    prev="\${COMP_WORDS[COMP_CWORD-1]}"
    opts="--dry --download-only --leave-zip-on-failure --chrome --platform --apt --version --self-update --help --target-dir --download-dir --force --bash-completion"

    case "\$prev" in
        --platform)
            COMPREPLY=( \$(compgen -W "$PLATFORMS" -- "\$cur") )
            return 0
            ;;
        --chrome)
            COMPREPLY=()
            return 0
            ;;
        -t|--target-dir|-d|--download-dir)
            compopt -o nospace 2>/dev/null
            COMPREPLY=( \$(compgen -d -- "\$cur" | sed 's#\$#/#') )
            return 0
            ;;
    esac
    if [[ "\$cur" == -* ]]; then
        COMPREPLY=( \$(compgen -W "\${opts}" -- "\$cur") )
        return 0
    fi
}

complete -F _upgrade_chromedriver upgrade-chromedriver
EOF
            exit 0
            ;;
        --version)
            echo "upgrade-chromedriver version $VERSION"
            exit 0
            ;;
        -h|--help)
            usage
            ;;
        -*)
            echo "Unknown option: $1"
            usage
            ;;
        *)
            if [ "$UNGUARDED_VERSION" = 1 ]; then
               usage
            fi
            UNGUARDED_VERSION=1
            CHROME_VERSION="$1"
            DRY=1
            ;;
    esac
    shift
done

# Determine Chrome version
if [ "$USE_APT" = 1 ]; then
    CHROME_VERSION="$(apt-get --just-print upgrade | grep "Conf google-chrome-stable" || [ $? -eq 1 ])"
    if [ -z "$CHROME_VERSION" ]; then
        echo "No upgradable google-chrome-stable"
        exit 0
    fi
    CHROME_VERSION="$(echo "$CHROME_VERSION" | grep -Eo '[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+')"
    version_source="APT cache"
elif [ -z "$CHROME_VERSION" ]; then
    CHROME_VERSION="$(google-chrome --version | cut -d ' ' -f 3)"
    if [ -z "$CHROME_VERSION" ]; then
        echo "Google Chrome is not installed or not found in PATH"
        exit 1
    fi
    version_source="Installed Chrome"
else
    version_source="Command line"
fi

echo "Chrome version = $CHROME_VERSION ($version_source)"

# Check existing chromedriver
if [ "$FORCE" != 1 ] && command -v chromedriver >/dev/null 2>&1; then
    INSTALLED_VERSION="$(chromedriver --version | cut -d ' ' -f 2)"
    if [ "$CHROME_VERSION" = "$INSTALLED_VERSION" ]; then
        echo "Chromedriver $INSTALLED_VERSION already installed"
        exit 0
    else
        if [ "$DRY" = 1 ]; then
            echo "Driver $INSTALLED_VERSION. Checking if an update available"
        else
            echo "Current driver $INSTALLED_VERSION. Replacing"
        fi
    fi
fi

TOOLS_MISSING=0
for tool in curl jq unzip; do
    if ! command -v "$tool" >/dev/null 2>&1; then
        echo "Error: Required tool '$tool' is not installed"
        TOOLS_MISSING=1
    fi
done
if [ "$TOOLS_MISSING" = 1 ]; then
    exit 1
fi

# Get download URL
API="https://googlechromelabs.github.io/chrome-for-testing/known-good-versions-with-downloads.json"
URL="$(curl -s "$API" |
    jq -r --arg PLATFORM "$PLATFORM" --arg VERSION "$CHROME_VERSION" \
        '.versions[] | select(.version==$VERSION).downloads.chromedriver[] | select(.platform==$PLATFORM).url')"

if [ -z "$URL" ]; then
    echo "Could not find downloadable chromedriver $CHROME_VERSION"
    exit 1
fi

echo "Download URL: $URL"

if [ "$DRY" = 1 ]; then
    echo "Found downloadable chromedriver $CHROME_VERSION"
    if [ "$DOWNLOAD_ONLY" != 1 ]; then
        exit 0
    fi
fi

# Download driver
if [ ! -w "$DOWNLOAD_DIR" ]; then
    echo "Download directory is not writable: $DOWNLOAD_DIR"
    exit 1
fi
ZIP_PATH="$(mktemp -p "$DOWNLOAD_DIR" "chromedriver-${PLATFORM}-${CHROME_VERSION}-XXXXXX.zip")"
echo "Downloading chromedriver to $ZIP_PATH..."

if ! curl -sL -o "$ZIP_PATH" "$URL" || [ ! -s "$ZIP_PATH" ]; then
    echo "Failed to download chromedriver"
    exit 1
fi

echo "Download complete: $ZIP_PATH"

if [ "$DOWNLOAD_ONLY" = 1 ]; then
    exit 0
fi

# Install driver
if [ -z "$TARGET_DIR" ]; then
    if command -v chromedriver >/dev/null 2>&1; then
        TARGET_DIR="$(dirname "$(command -v chromedriver)")"
    else
        if [ -d "$DEFAULT_TARGET_DIR" ]; then
            TARGET_DIR="$DEFAULT_TARGET_DIR"
        else
            TARGET_DIR="$DOWNLOAD_DIR"
        fi
        echo "No current chromedriver found. Installing to $TARGET_DIR"
    fi
fi

echo "Installing chromedriver to $TARGET_DIR..."

if unzip -d "$TARGET_DIR" -o -j "$ZIP_PATH" "*/chromedriver" >/dev/null; then
    rm "$ZIP_PATH"
    chmod +x "$TARGET_DIR/chromedriver"
    ls -lh "$TARGET_DIR/chromedriver"
    echo "chromedriver $CHROME_VERSION installed to $TARGET_DIR/chromedriver"
else
    echo "Failed to extract chromedriver"
    if [ "$LEAVE_ZIP_ON_FAILURE" = 1 ]; then
        echo "Leaving ZIP archive at $ZIP_PATH"
    else
        rm "$ZIP_PATH"
    fi
    exit 1
fi
